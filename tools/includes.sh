#!/usr/bin/env bash

DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd)"
conf="$DIR/../c-tools-include.el"
emacsd="$HOME/.emacs.d"

# generate system include paths from gcc/g++/clang++
gcc=gcc
gpp=g++

prog="#include <stdio.h>\n
int main () {}"

if [[ $OS == "Windows_NT" ]]; then
    emacsd=$(cygpath -m "$HOME/.emacs.d")
    gcc="c:/msys/mingw64/bin/x86_64-w64-mingw32-gcc.exe"
    gpp="c:/msys/mingw64/bin/x86_64-w64-mingw32-g++.exe"
    # gcc="c:/msys/ming64/bin/gcc.exe"
    # gpp="c:/msys/ming64/bin/c++.exe"
fi

#--- Print sys includes ----------------------------------------------

sys_includes () {
    case $1 in
        --help|-h)
            exec echo -e "usage: $0 [gcc|cc|c|g++|cpp|c++]"\
                 "or location of compiler";;
        gcc|cc|c)
            mg=$gcc
            lang=c;;
        g++|cpp|c++)
            mg=$gpp
            lang=c++;;
        *)
            mg="$1"
            if [ -z "$mg" ]; then
                echo >&2 "$0: requires compiler argument"
                exit 1
            fi;;
    esac
    echo $prog | $mg -v -x$lang -c - -o /dev/stdout 2>&1 |
        # remove excessive dots, print system includes
        sed -e ':1;s,/[^/.][^/]*/\.\./,/,;t 1' \
            -n -e '/#include </, /End/{/^ /p}' |
        # trim spaces and quote paths
        sed 's/ *\(.*\) *$/"\1"/'
}

clang_includes () {
    clang++ -E -x $1 - -v </dev/null 2>&1 |
        # remove excessive dots, print system includes
        sed -e ':1;s,/[^/.][^/]*/\.\./,/,;t 1' \
            -n -e '/#include </, /End/{/^ /p}' |
        # trim spaces and quote paths
        sed 's/ *\(.*\) *$/"\1"/'
}

#--- Write as lisp config  -------------------------------------------

make_sys_includes () {
    printf ";;; c/c++ system includes"                                    > $conf
    printf " - generated by includes.sh\n"                                >> $conf
    
    for arg in c c++; do
        lang=$arg
        printf "\n"                                                       >> $conf
        printf "(defconst c-tools-$lang-include-dirs\n  (list\n"          >> $conf
        sys_includes $arg | sed 's/^/   /'                                >> $conf
        printf "))\n"                                                     >> $conf
    done
    
    # clang
    if hash clang++ 2>/dev/null; then
        for arg in c c++; do
            printf "\n"                                                   >> $conf
            printf "(defconst c-tools-clang-$arg-include-dirs\n (list\n"  >> $conf
            clang_includes $arg | sed 's/^/   /' | sed 's;\\;/;g'         >> $conf
            printf "))\n"                                                 >> $conf
        done
    fi
    
    printf "(provide 'c-tools-include)" >> $conf
}

#--- read inputs -----------------------------------------------------
"$@"
