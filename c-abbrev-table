;; -*- coding: utf-8; mode: emacs-lisp -*-
(define-abbrev-table 'c-macros-includes-abbrev-table
  '(("#i" "#include" nil :system t)
    ("#e" "#endif" nil :system t)
    ("#d" "#define" nil :system t)
    ("#ifd" "#ifdef" nil :system t)
    ("#ifn" "#ifndef" nil :system t))
  "Includes abbrevs b/c cant have optional character looking back."
  :regexp "\\(#\\w+\\)"
  :parents (list prog-mode-abbrev-table))

(define-abbrev-table 'c-mode-abbrev-table
  '(
    ("so" "sizeof" nil :system t)
    ("ret" ["return ;" 1 nil nil] expand-abbrev-hook :system t)
    ("dmax" "#define max(A, B) ((A) > (B) ? (A) : (B))" nil :system t)
    )
  "C-mode abbrevs."
  :parents (list c-macros-includes-abbrev-table))

(define-abbrev-table 'c++-mode-abbrev-table
  '(
    ("th" "this" nil :system t)
    )
  "C++-mode abbrevs."
  :parents (list c-macros-includes-abbrev-table))

(define-abbrev-table 'boost-test-abbrev-table
  '(
    ("bc" "BOOST_CHECK" nil :system t)
    ("br" "BOOST_REQUIRE" nil :system t)
    ("bw" "BOOST_WARN" nil :system t)
    ("bcm" "BOOST_CHECK_MESSAGE" nil :system t)
    ("bce" "BOOST_CHECK_EQUAL" nil :system t)
    ("bct" "BOOST_CHECK_THROW" nil :system t)
    ("batc" ["BOOST_AUTO_TEST_CASE(  )" 2 nil nil] expand-abbrev-hook :system t)
    ("bats"
     ["BOOST_AUTO_TEST_SUITE(  )\nBOOST_AUTO_TEST_SUITE_END()" 30 nil nil]
     expand-abbrev-hook :system t)
    )
  "Boost abbrevs."
  :parents (list c++-mode-abbrev-table))

(define-abbrev-table 'check-abbrev-table
  '(
    ("st" ["START_TEST(   )\n{\n}\nEND_TEST" 16 nil nil] expand-abbrev-hook :system t)
    )
  "Check test abbrevs."
  :parents (list c-mode-abbrev-table))

(define-abbrev-table 'cunit-abbrev-table
  '()
  "CUnit abbrevs."
  :parents (list c-mode-abbrev-table))
