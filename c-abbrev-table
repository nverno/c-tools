;; -*- coding: utf-8; mode: emacs-lisp -*-
(define-abbrev-table 'c-macros-includes-abbrev-table
  '(("#i" "#include" nil :system t)
    ("#e" "#endif" nil :system t)
    ("#d" "#define" nil :system t)
    ("#ifd" "#ifdef" nil :system t)
    ("#ifn" "#ifndef" nil :system t)
    ("#max" "#define max(A, B) ((A) > (B) ? (A) : (B))" nil :system t)
    ("#min" "#define max(A, B) ((A) < (B) ? (A) : (B))" nil :system t))
  "Includes abbrevs b/c cant have optional character looking back."
  :regexp "\\(#\\w+\\)"
  :parents (list prog-mode-abbrev-table))

(define-abbrev-table 'c-common-abbrev-table
  '(
    ("td" "typedef" nil :system t)
    ("ret" ["return ;" 1 nil nil] expand-abbrev-hook :system t)
    )
  :parents (list c-macros-includes-abbrev-table))

(define-abbrev-table 'c-mode-abbrev-table
  '(
    ("null" "NULL" nil :system t)
    )
  "C-mode abbrevs."
  :parents (list c-common-abbrev-table))

(define-abbrev-table 'c++-mode-abbrev-table
  '(
    ("th" "this" nil :system t)
    ("usi" ["using std::;" 1 nil nil] expand-abbrev-hook :system t)
    ("veci" "std::vector<int>" nil :system t)
    ("vecd" "std::vector<double>" nil :system t)
    ("vecs" "std::vector<std::string>" nil :system t)
    ("vecp" ["std::vector<std::pair<>>" 2 nil nil] expand-abbrev-hook :system t)
    )
  "C++-mode abbrevs."
  :parents (list c-common-abbrev-table))

(define-abbrev-table 'boost-test-abbrev-table
  '(
    ("bc" ["BOOST_CHECK();" 2 nil nil] expand-abbrev-hook :system t)
    ("br" ["BOOST_REQUIRE();" 2 nil nil] expand-abbrev-hook :system t)
    ("bw" ["BOOST_WARN();" 2 nil nil] expand-abbrev-hook :system t)

    ("bcm" ["BOOST_CHECK_MESSAGE();" 2 nil nil] expand-abbrev-hook :system t)
    ("bct" ["BOOST_CHECK_THROW();" 2 nil nil] expand-abbrev-hook :system t)

    ("batc" ["BOOST_AUTO_TEST_CASE(  )" 2 nil nil] expand-abbrev-hook :system t)
    ("bats"
     ["BOOST_AUTO_TEST_SUITE(  )\nBOOST_AUTO_TEST_SUITE_END()" 30 nil nil]
     expand-abbrev-hook :system t)
    ("bceq" ["BOOST_CHECK_EQUAL();" 2 nil nil] expand-abbrev-hook :system t)
    ("bcne" ["BOOST_CHECK_NE();" 2 nil nil] expand-abbrev-hook :system t)
    ("bclt" ["BOOST_CHECK_LT();" 2 nil nil] expand-abbrev-hook :system t)
    ("breq" ["BOOST_REQUIRE_EQUAL();" 2 nil nil] expand-abbrev-hook :system t)
    ("brlt" ["BOOST_REQUIRE_LT();" 2 nil nil] expand-abbrev-hook :system t)
    ("brne" ["BOOST_REQUIRE_NE();" 2 nil nil] expand-abbrev-hook :system t)
    )
  "Boost abbrevs."
  :parents (list c++-mode-abbrev-table))

(define-abbrev-table 'check-abbrev-table
  '(
    ("st" ["START_TEST(   )\n{\n}\nEND_TEST" 16 nil nil] expand-abbrev-hook :system t)
    )
  "Check test abbrevs."
  :parents (list c-mode-abbrev-table))

(define-abbrev-table 'cunit-abbrev-table
  '()
  "CUnit abbrevs."
  :parents (list c-mode-abbrev-table))

(define-abbrev-table 'unity-abbrev-table
  '(
    ("rt" ["RUN_TEST(  );" 3 nil nil] expand-abbrev-hook :system t)
    ("tae" ["TEST_ASSERT_EQUAL(  );" 3 nil nil] expand-abbrev-hook :system t)
    )
  "Unity abbrevs."
  :parents (list c-mode-abbrev-table))
